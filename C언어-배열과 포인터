// !! data[n] 과 *(data+n)은 같다 !!

// data[1] = 0x22;를 포인터 표기법으로 나타냄
*(data +1) = 0x22;

// 일시적으로 int *형을 char *형으로 변환함
*(char *)(data +1) = 0x22;

char data[4];
char *p = &data[0]; // 배열의 첫 번째 항목의 주소가 배열 전체의 시작 주소와 같음  

char *p = &data[0];
char *p = &*(data+0); --> 배열 표기법을 포인터 표기법으로 변경
char *p = &*data; --> 0 생략가능
char *p = data; --> 주소를 얻는 &연산자와 주소를 받는 *연산자는 서로 반대 개념의 연산자이기 때문에 서로 상쇄된다.

==> 한번해보쟈
char *p = &data[0];
char *p = &*(data+0);
char *p = &*data;
char *p = data;

[포인터로 배열의 주소를 저장하여 사용하기]
- 배열은 배열의 시작 주소를 기준으로 색인 작업된 요소의 위치를 계산
- 배열의 같은 요소를 반복적으로 상요하는 경우 효율이 떨어짐
char data[5] = {1,2,3,4,5};
int i, sum = 0, select = 2;
// sum 변수에 data[select] (data[2]) 요소 값을 10번 더함
for(i =0; i < 10; i++) sum = sum+data[select]; // => for(i = 0 ; i < 10; i++) sum = sum+*(data+select); 와 같다.

- 지속적으로 사용되는 배열의 요소는 주소를 포인터 변수에 저장하여 사용
char data[5] = {1,2,3,4,5};
int i , sum = 0 , select =2;
char *p = data +select;
for(i=0; i < 10; i++) sum = sum +*p; 

[배열 예제를 포인터 사용해서 바꾸기]
char data[5] = {1,2,3,4,5};
int result =0,i;
for( i = 0; i < 5; i++) {
  result = result +data[i];
}
printf("data 배열의 각 요소의 합은 %d입니다. \n",result); 
